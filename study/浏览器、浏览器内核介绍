
<!--   /*   HTML篇   */

1. 页面导入样式时，使用 link 和 @import 有什么区别。
	1）从属关系区别。@import 只能导入样式表，link 还可以定义 RSS、rel 连接属性、引入网站图标等；
	2）加载顺序区别；加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载；
	3）兼容性区别；

2.	常见浏览器内核
	1）内核
		Trident：IE 浏览器内核；
		Gecko：Firefox 浏览器内核；
		Presto：Opera 浏览器内核；
		Webkit：Safari 浏览器内核；
		Blink：谷歌浏览器内核，属于 Webkit 的一个分支，与 Opera 一起在研发；
	2）浏览器
		IE：Trident，IE 内核；
		Chrome：以前是 Webkit，现在是 Blink 内核；
		Firefox：Gecko 内核；
		Safari：Webkit 内核；
		Opera：以前是 Presto，现在是 Blink 内核；
		360、猎豹浏览器内核：IE + Blink 双内核；
		搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；
		百度浏览器、世界之窗内核：IE 内核；
		2345 浏览器：以前是 IE 内核，现在是 IE + Blink 双内核；
		UC 浏览器内核：Webkit + Trident；

3.	浏览器的渲染原理
		1）首先解析收到的文档，根据文档定义构建一颗 DOM 树，DOM 树是由 DOM 元素及属性节点组成的；
		2）然后对 CSS 进行解析，生成 CSSOM 规则树；
		3）根据 DOM 树和 CSSOM 规则树构建 Render Tree。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 对象相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。
		4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情就是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。
		5）布局阶段结束后是绘制阶段，比那里渲染树并调用对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。
		为了更好的用户体验，渲染引擎会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 解析完成之后再去构建和布局 render tree。它是解析完一部分内容就显示一部分内容，同时可能还在网络下载其余内容。

4.  HTML5 的 form 的自动完成功能是什么？
		autocomplete 属性规定输入字段是否应该启用自动完成功能，默认为启用，设置为 autocomplete=off 可以关闭该功能。

		自动完成允许浏览器预测对字段的输入。在用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。


5.  如何实现浏览器内多个标签页之间的通信？
		实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者来让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。

		1) 使用 Websocket，通信的标签页连接同一个服务器，发送消息到服务器后，服务器推送消息给所有连接的客户端；
		2) 可以地调用 localStorage，localStorage 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个 storage 事件，我们可以通过监听 storage 事件，控制它的值来进行页面信息通信；
		3) 如果我们能够获得对应标签页的引用，通过 postMessage 方法也是可以实现多个标签页通信的；

6. 	简述前端性能优化
	1) 页面内容方面
		a. 通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况；
		b. 通过 DNS 缓存等机制来减少 DNS 的查询次数；
		c. 通过设置缓存策略，对常用不变的资源进行缓存；
		d. 通过延迟加载的方式，来减少页面首屏加载时需要请求的资源，延迟加载的资源当用户需要访问时，再去请求加载；
		e. 通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度；
	2) 服务器方面
		a. 使用 CDN 服务，来提高用户对于资源请求时的响应速度；
		b. 服务器端自用 Gzip、Deflate 等方式对于传输的资源进行压缩，减少传输文件的体积；
		c. 尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie；

7. 什么是 webp？
	WebP 是谷歌开发的一种新图片格式，它是支持有损和无损两种压缩方式的使用直接色的点阵图。使用 webp 格式的最大优点是是，在相同质量的文件下，它拥有更小的文件体积。因此它非常适合于网络图片的传输，因为图片体积的减少，意味着请求时间的减少，这样会提高用户的体验。这是谷歌开发的一种新的图片格式。

	浏览器如何判断是否支持 webp 格式图片？
		通过创建 Image 对象，将其 src 属性设置为 webp 格式的图片，然后在 onload 事件中获取图片的宽高，如果能够获取，则说明浏览器支持 webp 格式图片。如果不能获取或者触发了 onerror 函数，那么就说明浏览器不支持 webp 格式的图片。

 -->



 <!--  /*CSS 篇*/
		
1. 	介绍下 BFC 及其应用
		BFC（Block Format Context）块级格式化上下文，是页面盒模型中的一种 CSS 渲染模式，相当于一个独立的容器，里面的元素和外部的元素相互不影响。

		创建 BFC 的方式有：
			html 根元素
			float 浮动
			绝对定位
			overflow 不为 visible
			display 为表格布局或者弹性布局；
		BFC 主要的作用是：
			清除浮动
			防止同一 BFC 容器中的相邻元素间的外边距重叠问题


2.  讨论下垂直水平居中的多种方案  https://juejin.cn/post/6844903811098607630
		<div class="parent">
		<div class="child"></div>
		</div>
	/* 方法1 */
		div.parent {
		  display: flex;
		  justify-content: center;
		  align-items: center;
		}

	/* 方法2 */
		div.parent {
		  position: relative;
		}
		div.child {
		  position: absolute;
		  left: 50%;
		  top: 50%;
		  transform: translate(-50%, -50%);
		}

	/* 方法3 */
		div.parent {
		  display: grid;
		}
		div.child {
		  justify-self: center;
		  align-self: center;
		}

	/* 方法4 */

		div.parent {
		  font-size: 0;
		  text-align: center;
		  &::before {
		    content: "";
		    display: inline-block;
		    width: 0;
		    height: 100%;
		    vertical-align: middle;
		  }
		}
		div.child {
		  display: inline-block;
		  vertical-align: middle;
		}

3.	介绍下重绘和回流（Repaint & Reflow），以及如何进行优化？
	1）浏览器渲染机制
		a.浏览器采用流式布局模型（Flow Based Layout）；
		b.浏览器会把 HTML 解析成 DOM，把 CSS 解析成 CSSOM,DOM 和 CSSOM 合并就产生了渲染树（Render Tree）；
		c.有了 RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上；
		d.由于浏览器使用流式布局，对 Render Tree 的计算通常只需要遍历一次就可以完成，但 table 及其内部元素除外，他们可能需要多次计算，通常要花 3 倍于同等元素的时间，这也是为什么要避免使用 table 布局的原因之一；
	2)重绘
		由于节点的集合属性发生改变或者由于样式改变而不会影响布局的，成为重绘，例如 outline、visibility、color、background-color 等，重绘的代价是高昂的，因此浏览器必须验证 DOM 树上其他节点元素的可见性。

	3)回流
		回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致其素有子元素以及 DOM 中紧随其后的节点、祖先节点元素的随后的回流。大部分的回流将导致页面的重新渲染。

		回流必定会发生重绘，重绘不一定会引发回流。

	4)浏览器优化
		现代浏览器大多是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你获取布局信息的时候，队列中可能会有影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流和重绘来确保返回正确的值。

		例如 offsetTop、clientTop、scrollTop、getComputedStyle()、width、height、getBoundingClientRect()，应避免频繁使用这些属性，他们都会强制渲染刷新队列。

	5)减少重绘和回流
		a.CSS
			使用 transform 代替 top；
			使用 visibility 替换 display: none，前者引起重绘，后者引发回流；
			避免使用 table 布局；
			尽可能在 DOM 树的最末端改变 class；
			避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多；
			将动画效果应用到 position 属性为 absolute 或 fixed 的元素上，避免影响其他元素的布局；
			避免使用 CSS 表达式，可能会引发回流；
			CSS 硬件加速；
		b.Javascript
			避免频繁操作样式，修改 class 最好；
			避免频繁操作 DOM，合并多次修改为一次；
			避免频繁读取会引发回流/重绘的属性，将结果缓存；
			对具有复杂动画的元素使用绝对定位，使它脱离文档流；


















  -->
